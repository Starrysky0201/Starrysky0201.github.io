<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vim</title>
    <link href="/2025/01/14/Vim/"/>
    <url>/2025/01/14/Vim/</url>
    
    <content type="html"><![CDATA[<h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><blockquote><p>适用于：纯文本文件编辑（代码、markdown文件、LaTeX源码）</p><p>优势：</p><ul><li>高效的移动</li><li>高效的编辑</li></ul><p>主要4种模式：</p><ul><li>Normal模式：默认模式，也是最常用的模式</li><li>Insert模式：插入模式，像正常的文本编辑器一样输入</li><li>Command模式：命里模式，在底部输入命令</li><li>Visual模式：可视模式，对文本进行选择</li></ul></blockquote><h2 id="Normal模式"><a href="#Normal模式" class="headerlink" title="Normal模式"></a>Normal模式</h2><h3 id="基本移动"><a href="#基本移动" class="headerlink" title="基本移动"></a>基本移动</h3><ul><li><code>hjkl</code>：上下左右</li><li><code>gg</code>：跳到第一行（类似<code>Home</code>键）</li><li><code>G</code>：跳到最后一行（类似<code>End</code>键）</li><li><code>Ctrl-u</code> &#x2F; <code>Ctrl-b</code>：往上翻半页&#x2F;一页（类似键 <code>PageUp</code>）</li><li><code>Ctrl-d</code> &#x2F; <code>Ctrl-f</code>：往下翻半页&#x2F;一页（类似键 <code>PageDown</code>）</li><li><code>&#123;lineno&#125;gg</code>：跳到第<code>lineno</code>行</li><li><code>zz</code> &#x2F; <code>zt</code> &#x2F; <code>zb</code>：光标行设置为屏幕居中&#x2F;屏幕第一行&#x2F;屏幕最后一行</li></ul><h3 id="Insert模式"><a href="#Insert模式" class="headerlink" title="Insert模式"></a>Insert模式</h3><ul><li><code>i</code> ：代表”insert”，当前光标之前开始输入</li><li><code>a</code> ：代表”append”，当前光标之后开始输入</li><li><code>I</code> ：在本行的开头开始输入</li><li><code>A</code> ：在本行的末尾开始输入</li><li><code>o</code> ：下方插入新的一行，然后开始输入</li><li><code>s</code> ：删除当前光标的字符，然后开始输入</li><li><code>O</code> ：上方插入新的一行，然后开始输入</li><li><code>S</code> ：删除当前行，然后开始输入</li></ul><h3 id="进入Command模式"><a href="#进入Command模式" class="headerlink" title="进入Command模式"></a>进入Command模式</h3><p>Normal模式下输入<code>:</code>进入Command模式</p><ul><li><code>:w</code>：保存当前文件</li><li><code>:q</code>：退出</li><li><code>:q!</code>：放弃当前更改，然后退出</li><li><code>:wq</code>：保持当前更改，然后退出</li><li><code>:h&#123;command&#125;</code>：显示关于命里的帮助</li><li><code>&lt;Esc</code>：回到Normal模式</li></ul><h3 id="进入Visual模式"><a href="#进入Visual模式" class="headerlink" title="进入Visual模式"></a>进入Visual模式</h3><ul><li><code>v</code>：Normal模式下进入可视模式，选择字符</li><li><code>V</code> ：Normal模式下进入可视模式，选择行</li><li><code>x</code> &#x2F; <code>y</code>：剪切&#x2F;复制</li></ul><h3 id="基于单词的移动"><a href="#基于单词的移动" class="headerlink" title="基于单词的移动"></a>基于单词的移动</h3><p>简单的<code>hjkl</code>显然无法满足我们的需求</p><ul><li><code>w</code>：代表”word”，跳转到下一处单词的开头</li><li><code>b</code>：代表”back”，跳转到下一处单词的开头</li><li><code>e</code>：代表”end”，跳转到下一处单词的结尾</li><li><code>ge</code>：<code>e</code>的反向版本，跳转到下一个单词的结尾</li></ul><p><code>wbe</code>大写版本<code>WBE</code>对应的单词是连续的非空字符</p><h3 id="基于搜索的移动"><a href="#基于搜索的移动" class="headerlink" title="基于搜索的移动"></a>基于搜索的移动</h3><p>（1） 行内搜索：</p><ul><li><code>f&#123;char&#125;</code> &#x2F; <code>t&#123;char&#125;</code>：跳转到本行下一个<code>char</code>字符出现处&#x2F;出现前</li><li><code>;</code> &#x2F; <code>,</code>：快速向后&#x2F;向前重复<code>ft</code>查找</li><li><code>F&#123;char&#125;</code> &#x2F; <code>T&#123;char&#125;</code> ：往前搜索而非往后</li></ul><p>（2） 文件中搜索：</p><ul><li><code>/&#123;pattern&#125;</code>：跳转到本文件中下一个<code>pattern</code>出现的地方</li><li><code>?&#123;pattern&#125;</code>：跳转到本文件中上一个<code>pattern</code>出现的地方</li><li><code>pattern</code>：可以是正则表达式</li><li><code>*</code>：等价于<code>/&#123;pattern&#125;</code>，<code>pattern</code>是当前光标下的单词</li><li><code>nN</code>：快速重复<code>/</code>查找</li></ul><p>（3） 基于标记的移动</p><ul><li><code>m&#123;mark&#125;</code>：把当前位置标记为<code>mark</code></li><li>&#96;&#96;{mark}<code>：跳转到名为 </code>mark&#96; 的标记位置</li><li><code>mark</code>：为 <code>a-z</code> 的字符</li></ul><p>常用场景：当需要临时离开当前光标处，做一些事情后再快速地回来</p><p>内置标记：</p><ul><li>&#96;&#96; ：上次跳转前的位置</li><li>&#96;. ：上次修改的地方</li><li>&#96;^：上次插入的位置</li></ul><p>（4） 其它实用的跳转</p><ul><li><code>^</code> &#x2F; <code>$</code> ：跳转到本行的开始&#x2F;结尾</li><li><code>%</code> ：跳到匹配的配对符（括号等）处</li></ul><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><blockquote><p><code>&#123;operator&#125;&#123;motion&#125;</code> ：一次编辑动作</p><p>“操作符 + 移动” 是非常重要的操作逻辑，它运行你组合处各种动作</p></blockquote><p>常见操作符：</p><ul><li><code>c</code>：代表”change”，修改，删除内容并进入插入模式</li><li><code>d</code>：代表”delete”，删除</li><li><code>y</code>：代表”yank”，复制</li><li><code>v</code>：代表”visual”，选中文本，进入可视模式</li></ul><p>例子：</p><ul><li><code>dgg</code>：删除到第一行</li><li><code>ye</code>：复制到单词结尾</li><li><code>d$</code>：删除到行尾</li><li><code>dt;</code>：删除直到分号为止的内容</li></ul><h3 id="重复操作：-命令"><a href="#重复操作：-命令" class="headerlink" title="重复操作：. 命令"></a>重复操作：<code>.</code> 命令</h3><ul><li><code>.</code>：重复上一次修改</li><li><code>u</code>：撤销上一次修改</li><li><code>&lt;Ctrl-r&gt;</code>：重做上一次修改</li></ul><blockquote><p><code>.</code>命令非常适合用于需要多次重复某一个修改动作的场景，省去了重复输入命令，大大提高了效率。</p></blockquote><h3 id="批量操作：数字-动作"><a href="#批量操作：数字-动作" class="headerlink" title="批量操作：数字+动作"></a>批量操作：数字+动作</h3><blockquote><p><code>&#123;count&#125;&#123;action&#125;</code>：重复<code>count</code>次<code>action</code>动作</p><p>动作可以是移动动作或者编辑动作</p></blockquote><ul><li><code>4j</code>：向下移动4行</li><li><code>3dw</code>：删除3个单词</li><li><code>2yy</code>：复制2行</li><li><code>4p</code>：粘贴4次</li></ul><blockquote><p>数字+动作，是一种重要的批量操作方式，命里直观，语义明确</p><ul><li><code>.</code> 命令可以直观地看到每一次的变化，在合适的时候停止</li><li>数字+动作则需要预先知道都做的次数</li></ul></blockquote><h3 id="技巧：使用相对行号确定移动范围"><a href="#技巧：使用相对行号确定移动范围" class="headerlink" title="技巧：使用相对行号确定移动范围"></a>技巧：使用相对行号确定移动范围</h3><blockquote><p>当涉及行操作时，使用相对行号能够更直观地确定范围</p><p><code>:set relativenumber</code> ：开启</p><p><code>:set norelativenumber</code> ：关闭</p></blockquote><h2 id="文本对象操作"><a href="#文本对象操作" class="headerlink" title="文本对象操作"></a>文本对象操作</h2><p><code>textobjects</code>：语义化的文本片段</p><p>格式：<code>i</code> &#x2F; <code>a</code> + 对象</p><p>常见的对象：</p><ul><li><code>w</code> &#x2F; <code>W</code>，<code>s</code>，<code>p</code>：单词、句子、段落</li><li><code>(</code> &#x2F; <code>)</code>，<code>[</code> &#x2F; <code>]</code>，<code>&#123;</code> &#x2F; <code>&#125;</code>，<code>&lt;</code> &#x2F; <code>&gt;</code>，<code>&#39;</code> &#x2F; <code>&quot;</code>：配对符定义的对象</li></ul><p><code>i</code> ：代表”inner”，内部；</p><p><code>a</code>：代表”a”，额外包括周围的空格或配对符</p><h2 id="操作符与命令补充"><a href="#操作符与命令补充" class="headerlink" title="操作符与命令补充"></a>操作符与命令补充</h2><ul><li><code>gu</code> &#x2F; <code>gU</code> &#x2F; <code>g~</code> ：操作符，转小写&#x2F;转大写&#x2F;翻转大小写</li><li><code>J</code>：join，连接两行</li><li><code>&lt;Ctrl-a&gt;</code> &#x2F; <code>Ctrl-x</code>：增加数字&#x2F;减少数字</li><li><code>g&lt;Ctrl-A&gt;</code> ：创建递增序列</li><li><code>&lt;</code> &#x2F; <code>&gt;</code> ：左&#x2F;右缩进</li></ul><h2 id="寄存器与宏"><a href="#寄存器与宏" class="headerlink" title="寄存器与宏"></a>寄存器与宏</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><blockquote><p>Vim提供了许多寄存器用于存放内容，可以理解为剪切板，一个字符对应一个寄存器（如<code>a-z</code>，<code>0-9</code>）</p><p>特别的寄存器：</p><ul><li><code>&quot;</code> ：默认寄存器，平时复制、删除的内容都放在里面</li><li><code>%</code> ：当前文件名</li><li><code>.</code> ：上次插入的内容</li><li><code>:</code> ：上次执行的命令</li></ul><p>通过<code>:reg &#123;register&#125;</code> 查看对应寄存器的内容</p></blockquote><blockquote><p><strong>指定寄存器</strong></p><p>在复制&#x2F;删除&#x2F;粘贴等操作前加上<code>&#123;register&#125;</code> 就可以指定本次操作所用的寄存器</p><p>只要涉及寄存器操作的都可以这样指定</p><ul><li><code>&quot;ayy</code> ：将这一行复制到<code>a</code>寄存器中</li><li><code>&quot;bdiw</code> ：将单词删除，保存到<code>b</code>寄存器中</li><li><code>&quot;cp</code> ：将<code>c</code>寄存器中的内容粘贴出来</li></ul><p>常见用途：将想要持久保持的文本放到制定寄存器里，随时进行粘贴，避免被覆盖</p><p>寄存器字符大写：添加（append）而并非覆盖</p></blockquote><h3 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h3><blockquote><p>宏（Macro）：录制一系列键盘操作，并允许我们重放这些操作</p><p>操作序列存储在指定的寄存器中</p><ul><li><p><code>q&#123;register&#125;</code> ：开始录制宏，存在寄存器<code>register</code>中</p></li><li><p>录制过程中按<code>q</code>退出录制</p></li><li><p><code>@&#123;register&#125;</code>：重放寄存器<code>register</code>中的操作</p></li><li><p><code>@@</code>：重放上一次宏操作</p><p>  常见用法：<code>q&#123;register&#125;</code>录制一段操作，<code>@&#123;register&#125;</code>重复，然后一直<code>@@</code>重放</p><blockquote><p>注意：<code>.</code>命令对宏不生效，<code>.</code>命令只记录上一次修改，而宏可能包含多次修改</p></blockquote></li></ul></blockquote><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><blockquote><p>命令模式的操作对象以”行”为基本单位</p><p>normal和global命令提供了强大的批量行操作</p></blockquote><h3 id="Ex命令格式"><a href="#Ex命令格式" class="headerlink" title="Ex命令格式"></a>Ex命令格式</h3><blockquote><p><code>:[range] &#123;excommand&#125; [args]</code></p><ul><li><code>range</code>：作用的范围，不给的话默认是本行</li><li><code>excommand</code>：特殊的命令，适用于Command模式</li><li><code>arg</code>：后续的参数，视命令而定</li></ul><p>一些Ex Command（<code>[x]</code>为寄存器，是可选项）：</p><ul><li><code>:[range] delete [x]</code>：删除<code>range</code>中的行（到寄存器<code>x</code>），<code>delete</code>可简写为<code>d</code></li><li><code>:[range] yank [x]</code>：复制<code>range</code>中的行（到寄存器<code>x</code>），<code>yank</code>可简写为<code>y</code></li><li><code>:[range] print</code>：将<code>range</code>中的行打印出来，<code>print</code>可简写为<code>p</code></li></ul></blockquote><h3 id="range与addres：指定范围"><a href="#range与addres：指定范围" class="headerlink" title="range与addres：指定范围"></a><code>range</code>与<code>addres</code>：指定范围</h3><p><code>range</code>由一个或两个<code>address</code>构成，即<code>&#123;address&#125;</code> 或 <code>&#123;address&#125;,&#123;address&#125;</code></p><p><code>addres</code>可以是：</p><ul><li><code>&#123;lineno&#125;</code>：行号，如<code>3</code>代表第三行（0代表第一行上面的虚拟行）</li><li><code>$</code>：最后一行</li><li><code>.</code>：光标所在行</li><li><code>/&#123;pattern&#125;</code>：下一个<code>pattern</code>所在的行</li></ul><p><code>address</code>可以做加减法，<code>.+3</code>代表光标下第三行，<code>$-3</code>代表倒数第 4 行</p><h3 id="行的复制、移动、粘贴"><a href="#行的复制、移动、粘贴" class="headerlink" title="行的复制、移动、粘贴"></a>行的复制、移动、粘贴</h3><ul><li><code>:[range] copy &#123;address&#125;</code>：把<code>range</code>中的行复制到<code>address</code>后面</li><li><code>:[range] move &#123;address&#125;</code>：把<code>range</code>中的行移动到<code>address</code>后面</li><li><code>:[address] put [x]</code>：把寄存器<code>x</code>的内容粘贴到<code>address</code>后面</li></ul><h3 id="normal命令"><a href="#normal命令" class="headerlink" title="normal命令"></a>normal命令</h3><p>格式：<code>:[range] normal &#123;commands&#125;</code></p><p>含义：对<code>range</code>中的所有行执行Normal模式下的命令<code>commands</code></p><ul><li><p>将<code>range</code>设置为<code>%</code>，可以对整个文件的所有行执行</p></li><li><p><code>:[range] normal .</code>：配合<code>.</code>命令，效果拔群</p><p>  常用做法：先做一次修改操作，再用normal命令在指定的行上完成操作</p></li><li><p><code>.</code>命令只能记录一次修改，用宏可以实现记录多个操作</p><p>  <code>:[range] normal @&#123;register&#125;</code></p><p>  常用做法：先把想要的操作录制成宏，再用normal命令在指定的行上重放宏</p></li></ul><h3 id="global命令"><a href="#global命令" class="headerlink" title="global命令"></a>global命令</h3><p>格式：<code>:[range] global/&#123;pattern&#125;/[cmd]</code></p><p>含义：对<code>range</code>中包含<code>pattern</code>的所有行执行Command模式下的Ex命令</p><p><code>[cmd]</code>：Ex命令，不给的话默认打印（<code>print</code>）</p><p>注意，<code>normal</code>命令也是Ex命令！</p><p>例子：</p><ul><li><code>:% global /TODO/delete</code></li></ul><h3 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h3><p>格式：<code>:[range]s/&#123;pattern&#125;/&#123;string&#125;/[flags]</code></p><p>含义：将<code>pattern</code>替换为<code>string</code></p><p><code>flags</code>：</p><ul><li><code>g</code>：替换每一行的所有匹配</li><li><code>i</code>：忽视大小写</li><li><code>c</code>：替换前进行确认</li><li><code>n</code>：计数而不是替换</li></ul><p>例子：</p><p><code>:%s/Vim//gn</code>：统计文件中所以<code>Vim</code>出现的次数（此时替换为什么无所谓，加了<code>n</code>就不会执行替换操作）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Shell脚本</title>
    <link href="/2025/01/14/Shell%E8%84%9A%E6%9C%AC/"/>
    <url>/2025/01/14/Shell%E8%84%9A%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a>Shell脚本</h1><blockquote><p>Shell是一个用C语言编写的程序，它是用户使用Linux的桥梁。Shell即是一种命令语言，又是一种程序设计语言。</p><p>Shell是指一种应用程序，这个应用程序提供一个界面，用户通过这个界面访问操作系统内核的服务。</p></blockquote><blockquote><p>Shell脚本（shell script），是一种为shell编写的脚步程序。</p><p>Linux的Shell种类众多，常见的有：</p><ul><li>Bourne Shell（&#x2F;usr&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;sh）</li><li>Bourne Again Shell（&#x2F;bin&#x2F;bash）</li><li>C Shell（&#x2F;usr&#x2F;bin&#x2F;csh）</li><li>K Shell（&#x2F;usr&#x2F;bin&#x2F;ksh）</li><li>Shell for Root（&#x2F;sbin&#x2F;sh）</li></ul></blockquote><h2 id="第一个Shell脚本"><a href="#第一个Shell脚本" class="headerlink" title="第一个Shell脚本"></a>第一个Shell脚本</h2><p>第一个Shell脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br>或者<br><span class="hljs-comment">#!/bin/sh</span><br><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Hello World !&quot;</span><br></code></pre></td></tr></table></figure><p><code>#!</code>：是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell。</p><p><code>echo</code>：用于向窗口输出文本。</p><p>运行Shell脚本的两种方法：</p><ol><li>作为可执行程序</li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">chmod +x ./test.sh # 使脚本具有执行权限<br>./test.sh # 执行脚本<br></code></pre></td></tr></table></figure><ol start="2"><li>作为解释器参数</li></ol><p>这种运行方式，直接运行解释器，其参数就是shell脚本的文件名，如：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">/bin/sh test.sh<br>/bin/php test.php<br></code></pre></td></tr></table></figure><h2 id="Shell变量"><a href="#Shell变量" class="headerlink" title="Shell变量"></a>Shell变量</h2><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><blockquote><p>在Shell编程中，变量是用于存储数据值的名称。</p><p><strong>注：变量名和等号之间不能有空格</strong></p><p>命名规则：</p><ul><li>只包含字母、数字和下划线</li><li>不能以数字开头</li><li>避免使用Shell关键字</li><li>使用大写字母表示常量</li><li>避免使用特殊符号</li><li>避免使用空格</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 有效变量</span><br>your_name=<span class="hljs-string">&quot;runoob&quot;</span><br>_val=<span class="hljs-string">&quot;123&quot;</span><br>PATH=<span class="hljs-string">&quot;/bin/&quot;</span><br></code></pre></td></tr></table></figure><h3 id="使用变量："><a href="#使用变量：" class="headerlink" title="使用变量："></a>使用变量：</h3><blockquote><p>使用一个定义过的变量，只要在变量名前面加美元符号即可。</p><p>变量名外面的花括号为可选</p><p>加花括号是为了帮助解释器识别变量的边界</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">your_name=<span class="hljs-string">&quot;qinjx&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$your_name</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;your_name&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;My name is <span class="hljs-variable">$&#123;your&#125;</span>name&quot;</span><br></code></pre></td></tr></table></figure><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><blockquote><p>使用<code>readonly</code>命令可以将变量定义为只读变量，只读变量的值不能被改变。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>myurl=<span class="hljs-string">&quot;https://www.google.com&quot;</span><br><span class="hljs-built_in">readonly</span> myurl<br>myurl=<span class="hljs-string">&quot;https://www.runoob.com&quot;</span> <span class="hljs-comment"># 错误</span><br></code></pre></td></tr></table></figure><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><blockquote><p>使用<code>unset</code>命令可以删除变量.</p><p>变量被删除后不能再次使用。</p><p><code>unset</code>命令不能删除只读变量</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">unset</span> variable_name<br></code></pre></td></tr></table></figure><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><ol><li>字符串变量</li></ol><blockquote><p>在Shell中，变量通常被视为字符串。</p><p>你可以使用单引号<code>&#39;</code>或双引号<code>&quot;</code>来定义字符串</p><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字符串中不能出现单独一个单引号（对单引号使用转义符后也不行），但可以成对出现，作为字符串拼接使用</li></ul><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sh">your_name=<span class="hljs-string">&quot;runoob&quot;</span><br><span class="hljs-comment"># 使用双引号拼接</span><br>greeting=<span class="hljs-string">&quot;hello, &quot;</span><span class="hljs-variable">$your_name</span><span class="hljs-string">&quot; !&quot;</span><br>greeting_1=<span class="hljs-string">&quot;hello, <span class="hljs-variable">$&#123;your_name&#125;</span> !&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$greeting</span>  <span class="hljs-variable">$greeting_1</span><br><br><span class="hljs-comment"># 使用单引号拼接</span><br>greeting_2=<span class="hljs-string">&#x27;hello, &#x27;</span><span class="hljs-variable">$your_name</span><span class="hljs-string">&#x27; !&#x27;</span><br>greeting_3=<span class="hljs-string">&#x27;hello, $&#123;your_name&#125; !&#x27;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$greeting_2</span>  <span class="hljs-variable">$greeting_3</span><br><br>---<br>hello, runoob ! hello, runoob !<br>hello, runoob ! hello, <span class="hljs-variable">$&#123;your_name&#125;</span> !<br>---<br></code></pre></td></tr></table></figure><p>获取字符串长度：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">string=<span class="hljs-string">&quot;abcd&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#string&#125;</span><br>或<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;#string[0]&#125;</span><br></code></pre></td></tr></table></figure><p>提取子字符串</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">string=<span class="hljs-string">&quot;runoob is a great site&quot;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;string:1:4&#125;</span> <span class="hljs-comment"># 输出 unoo</span><br></code></pre></td></tr></table></figure><p>查找子字符串</p><blockquote><p>查找字符i或者o位置（哪个字母线出现就计算哪个）：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">string=<span class="hljs-string">&quot;runoob is a great site&quot;</span><br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">expr</span> index <span class="hljs-string">&quot;<span class="hljs-variable">$string</span>&quot;</span> io` <span class="hljs-comment"># 输出4</span><br></code></pre></td></tr></table></figure><ol start="2"><li>整数变量</li></ol><blockquote><p>在一些Shell中，你可以使用<code>declare</code>或者<code>typeset</code>命令声明整数变量。</p><p>这样的变量只包含整数值，如果尝试将非整数值赋给它，Shell会尝试将其转换为整数。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">declare</span> -i my_integer=42<br></code></pre></td></tr></table></figure><ol start="3"><li>数组变量</li></ol><blockquote><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p>类似于C语言，数组元素的下标由0开始编号。</p><p>获取数组中的元素要利用下标，下标可以是整数或者算术表达式，其值应大于或等于0</p><p><strong>定义数组</strong>：（数组元素用<strong>空格</strong>符号隔开）</p><p>定义数组的一般形式为：</p><p>数组名&#x3D;(值1 值2 … 值n)</p><p><strong>读取数组</strong>：</p><p>${数组名[下标]}</p><p>使用<code>@</code>符号可以获取数组中的所有元素</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">array_name=(val0 val1 val2)<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array_name[n]&#125;</span><br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;array_name[@]&#125;</span><br></code></pre></td></tr></table></figure><p>获取数组长度</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">length=<span class="hljs-variable">$&#123;#array_name[@]&#125;</span><br>lenget=<span class="hljs-variable">$&#123;#array_name[*]&#125;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>环境变量</li></ol><blockquote><p>这些是由操作系统或者用户设置的特殊变量，用于配置Shell的行为和影响其执行环境。</p><p><code>PATH</code>变量包含了操作系统搜索可执行文件的路径：</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure><ol start="5"><li>特殊变量</li></ol><blockquote><p>有一些特殊变量在Shell中具有特殊含义，</p><p>例如：</p><p><code>#0</code>表示脚本的名称</p><p><code>$1``$2</code>等表示脚本的参数</p><p><code>$#</code>表示传递给脚本的参数数量</p><p><code>$?</code>表示上一个命令的退出状态等</p></blockquote><h2 id="Shell注释"><a href="#Shell注释" class="headerlink" title="Shell注释"></a>Shell注释</h2><blockquote><p>以<code>#</code>开头的行就是注释，会被解释器忽略。</p><p>通过每一行加一个<code>#</code>号设置多行注释</p><p>多行注释</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sh">:&lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">注释内容</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-comment"># EOF也可以使用其他符号：</span><br>:&lt;&lt;<span class="hljs-string">&#x27;</span><br><span class="hljs-string">注释内容</span><br><span class="hljs-string">&#x27;</span><br><br>:&lt;&lt;!<br>注释内容<br>!<br><br>: <span class="hljs-string">&#x27;</span><br><span class="hljs-string">注释内容</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="Shell传递参数"><a href="#Shell传递参数" class="headerlink" title="Shell传递参数"></a>Shell传递参数</h2><blockquote><p>我们可以在执行Shell脚本时，向脚本传递参数，脚本内获取参数的格式为<code>$n</code>，n表示一个数字，1为执行脚本的第一个参数，2为执行脚本的第二个参数。其中<code>$0</code>为执行的文件名（包含文件路径）</p></blockquote><p><code>$#</code>：传递到脚本的参数个数</p><p><code>$*</code>：以一个单字符串显示所有向脚本传递的参数</p><p><code>$$</code>：脚本运行的当前进程ID号</p><p><code>$!</code>：后台运行的最后一个进程的ID号</p><p><code>$@</code>：与<code>$*</code>相同，但是使用时加引号，并在引号中返回每个参数</p><p><code>$-</code>：显示Shell使用的当前选项，与set命令功能相同</p><p><code>$?</code>：显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</p><h2 id="Shell数组"><a href="#Shell数组" class="headerlink" title="Shell数组"></a>Shell数组</h2><blockquote><p>数组中可以存放多个值。Bash Shell只支持一维数组（不支持多维数组），初始化时不需要定义数组大小。</p><p>Shell数组用括号来表示，元素”空格”符号分割开，语法格式如下：</p><p>array_name&#x3D;(value1 value2 … valuen)</p><p>读取数组元素值的一般格式是：</p><p>${array_name[index]}</p><p>关联数组：</p><p>Bash支持关联数组，可以使用任意的字符串、或者整数作为下标来访问数组元素</p><p>关联数组使用<code>declare</code>命令来声明，语法格式如下：</p><p>declare -A array_name</p><p><code>-A</code>选项就是用于声明一个关联数组</p><p>关联数组的键是唯一的。</p><p>使用<code>@</code>或<code>*</code>可以获取数组中的所以元素</p><p>在数组前加一个感叹号<code>!</code>可以获取数组的所有键</p><p>在数组前加一个<code>#</code>卡伊获取数组的长度</p></blockquote><h2 id="Shell基本运算符"><a href="#Shell基本运算符" class="headerlink" title="Shell基本运算符"></a>Shell基本运算符</h2><blockquote><p>Shell和其他编程语言一样，支持多种运算符，包括：</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如awk和expr，expr最常用。</p><p>expr是一款表达式计算工具，使用它能完成表达式的求值操作。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br>val=`<span class="hljs-built_in">expr</span> 2 + 2`<br><span class="hljs-comment"># 注意表达式和运算符之间要有空格</span><br></code></pre></td></tr></table></figure><p>关系运算符：</p><p><code>-eq</code> ：相等</p><p><code>-ne</code>：不相等</p><p><code>-gt</code>：大于</p><p><code>-lt</code>：小于</p><p><code>-ge</code>：大于等于</p><p><code>-le</code>：小于相等</p><p>布尔运算符：</p><p><code>!</code>：非运算法</p><p><code>-o</code>：或运算</p><p><code>-a</code>：与运算</p><p>逻辑运算符：</p><p><code>&amp;&amp;</code>：逻辑的AND</p><p><code>||</code>：逻辑的OR</p><p>字符串运算：</p><p><code>=</code>：字符相等</p><p><code>!=</code>：字符不相等</p><p><code>-z</code>：长度为零</p><p><code>-n</code>：长度不为0</p><p><code>$</code>：字符串不为空</p><p>文件测试运算符：</p><p><code>-b</code>：检测文件是否是块设备文件</p><p><code>-c</code>：检测文件是否是字符设备文件</p><p><code>-d</code>：检测文件是否是目录</p><p><code>-f</code>：检测文件是否是普通文件</p><p><code>-g</code>：检测文件是否设置SGID位</p><p><code>-k</code>：检测文件是否设置了粘着位</p><p><code>-p</code>：检测文件是否是有名管道</p><p><code>-u</code>：检测文件是否设置SUID位</p><p><code>-r</code>：检测文件是否可读</p><p><code>-w</code>：检测文件是否可写</p><p><code>-x</code>：检测文件是否可执行</p><p><code>-s</code>：检测文件是否为空</p><p><code>-e</code>：检测文件是否存在</p><p>使用<code>$(())</code>进行算术运算</p><p><code>$(())</code>语法也是进行算术运算的一种方式</p><h2 id="Shell-echo命令"><a href="#Shell-echo命令" class="headerlink" title="Shell echo命令"></a>Shell echo命令</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;It is a test&quot;</span><br>此时双引号完全可以省略<br><span class="hljs-built_in">echo</span> It is a <span class="hljs-built_in">test</span><br><br>显示转义字符<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\&quot;It is a test\&quot;&quot;</span><br><br>显示换行<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;OK \n&quot;</span><br><br>显示不换行<br><span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;OK! \c&quot;</span><br><br>显示结果定向至文件<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;It is a test&quot;</span> &gt; myfile<br><br>显示命令执行结果<br><span class="hljs-built_in">echo</span> `<span class="hljs-built_in">date</span>`<br></code></pre></td></tr></table></figure><h2 id="Shell-printf-命令"><a href="#Shell-printf-命令" class="headerlink" title="Shell printf 命令"></a>Shell printf 命令</h2><blockquote><p>默认的printf不会像<code>echo</code>自动添加换行符。</p><p>printf命令的语法：</p><p>printf format-string [arguments]</p><ul><li><code>%s</code>：字符串</li><li><code>%d</code>：十进制整数</li><li><code>%f</code>：浮点数</li><li><code>%c</code>：字符</li><li><code>%x</code>：十六进制数</li><li><code>%o</code>：八进制数</li><li><code>%b</code>：二进制数</li><li><code>%e</code>：科学计数法表示浮点数</li></ul></blockquote><h2 id="Shell流程控制"><a href="#Shell流程控制" class="headerlink" title="Shell流程控制"></a>Shell流程控制</h2><blockquote><p>sh的流程控制不可为空</p></blockquote><h3 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">if</span> condition1<br><span class="hljs-keyword">then</span><br>command1<br><span class="hljs-keyword">elif</span> conditons2<br><span class="hljs-keyword">then</span><br>command2<br><span class="hljs-keyword">else</span><br>commandN<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> item1 item2 ... itemN<br><span class="hljs-keyword">do</span><br>command1<br>command2<br>...<br>commandN<br><span class="hljs-keyword">done</span><br>或<br><span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> item1 item2 ... itemN; <span class="hljs-keyword">do</span> command1; command2... <span class="hljs-keyword">done</span>;<br></code></pre></td></tr></table></figure><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">while</span> condition<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">command</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h3 id="case-…-esac"><a href="#case-…-esac" class="headerlink" title="case … esac"></a>case … esac</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-keyword">case</span> 值 <span class="hljs-keyword">in</span><br>模式1)<br>command1<br>command2<br>...<br>commandN<br>;;<br>模式12<br>command1<br>command2<br>...<br>commandN<br>;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h2 id="Shell函数"><a href="#Shell函数" class="headerlink" title="Shell函数"></a>Shell函数</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">[ <span class="hljs-keyword">function</span> <span class="hljs-title">]</span> funname [()]<br>&#123;<br>action;<br>[<span class="hljs-keyword">return</span> <span class="hljs-type">int</span>;]<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>函数返回值在调用该函数后通过<code>$?</code>来获得</p></blockquote><h3 id="Shell-输入-输出重定向"><a href="#Shell-输入-输出重定向" class="headerlink" title="Shell 输入&#x2F;输出重定向"></a>Shell 输入&#x2F;输出重定向</h3><p><code>command &gt; file</code>：将输出重定向到file</p><p><code>command &lt; file</code>：将输入重定向到file</p><p><code>command &gt;&gt; file</code>：将输出以追加的方式重定向到file</p><p><code>n &gt; file</code>：将文件描述符为n的文件重定向到file</p><p><code>n &gt;&gt; file</code>：将文件描述符n的文件以追加的方式重定向到file</p><p><code>n &gt;&amp; m</code>：将输出文件m和n合并</p><p><code>n &lt;&amp; m</code>：将输入文件m和n合并</p><p><code>&lt;&lt; tag</code>：将开始标记tag和结束标记tag之间的内容作为输入</p><h2 id="Shell文件包含"><a href="#Shell文件包含" class="headerlink" title="Shell文件包含"></a>Shell文件包含</h2><blockquote><p>Shell可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">. filename<br>或<br><span class="hljs-built_in">source</span> filename<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令</title>
    <link href="/2025/01/14/Linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2025/01/14/Linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h1><h2 id="路径描述"><a href="#路径描述" class="headerlink" title="路径描述"></a>路径描述</h2><ul><li>Linux系统中，路径之间的层级关系使用：&#x2F;表示，根目录&#x2F;</li><li>Windows系统中，路径直接的层级关系使用：\表示</li></ul><h2 id="命令通用格式"><a href="#命令通用格式" class="headerlink" title="命令通用格式"></a>命令通用格式</h2><blockquote><p>command [-options] [parameter]</p></blockquote><ul><li>command : 命令本身</li><li>-options : [可选，非必填]命里的一些选项，可以通过选项控制命里的行为细节</li><li>parameter : [可选，非必填]命里的参数，多用于命令的指向目标等</li></ul><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><blockquote><p>语法：</p><p>ls  [-a -l -h]   [Linux路径]</p></blockquote><ul><li>-aall的意思，列出全部文件（包含隐藏文件&#x2F;文件夹）</li><li>-l         以列表的形式展示内容，显示更多信息</li><li>-h        必须和-l搭配使用，列出文件大小，如K，M，G</li></ul><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2><blockquote><p>全称（Change Directory）</p><p>语法：</p><p>cd [Linux路径]</p></blockquote><ul><li>cd命令无需选项，只有参数，表示切换目录</li><li>默认用户的HOME目录</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> / <span class="hljs-comment"># 根目录</span><br><span class="hljs-built_in">cd</span> home <br><span class="hljs-built_in">cd</span>   <span class="hljs-comment"># 跳转默认目录</span><br><span class="hljs-built_in">cd</span> - <span class="hljs-comment"># 跳转到刚才来的那个目录</span><br></code></pre></td></tr></table></figure><h2 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h2><blockquote><p>全称（Print Work Directory）</p><p>语法：</p><p>pwd</p></blockquote><p>显示当前工作路径</p><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><blockquote><p>全称：remove 命令用于删除一个文件或者目录</p><p>语法</p><p>rm [options] name…</p></blockquote><p>参数：</p><ul><li><code>-i</code> ：删除前逐一确认</li><li><code>-f</code> ：即使原档案属性设为只读，亦直接删除，无需逐一确认</li><li><code>-f</code> ：将目录及以下之档案亦逐一删除</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">rm -rf test/<br>rm -rf test.c<br></code></pre></td></tr></table></figure><h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><blockquote><p>全称：make directory 命令用于创建目录。</p><p>mkdir [-p] dirName</p></blockquote><p><strong>参数说明</strong>：</p><ul><li><code>-p</code> 确保目录名称存在，不存在的就建一个。</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 例如<br><span class="hljs-built_in">mkdir</span> test.c<br><span class="hljs-built_in">mkdir</span> -p test<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git</title>
    <link href="/2025/01/14/Git/"/>
    <url>/2025/01/14/Git/</url>
    
    <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="1、-Git介绍"><a href="#1、-Git介绍" class="headerlink" title="1、 Git介绍"></a>1、 Git介绍</h2><blockquote><ul><li>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或大或小的项目</li><li>Git采用了分布式版本库的方式，不必服务器端软件支持。</li></ul></blockquote><h2 id="2、-Git配置"><a href="#2、-Git配置" class="headerlink" title="2、 Git配置"></a>2、 Git配置</h2><blockquote><p>Git提供了一个叫做<code>git config</code>的命令，用于配置或读取相应的工作环境变量。</p><p>这些环境变量，决定了Git在各个环节的具体工作方式和行为。</p><p>这些变量可以存放在以下三个不同的地方：</p><ul><li><code>/etc/gitconfig</code>文件：系统中对所有用户都普遍适用的配置。使用git config 时用–system选项，读写的就是这个文件。</li><li><code>~/.gitconfig</code>文件：用户目录下的配置文件只适用于该用户。使用git config 时用–gloabl选项，读写的就是这个文件。</li><li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li></ul></blockquote><h3 id="2-1-用户信息"><a href="#2-1-用户信息" class="headerlink" title="2.1 用户信息"></a>2.1 用户信息</h3><blockquote><p>配置个人的用户名和电子邮件地址，这是为了在每次提交代码时记录提交者的信息：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git config --global user.name &quot;runoob&quot;<br>git config --global user.email test@runoob.com<br></code></pre></td></tr></table></figure><h3 id="2-2-文本编辑器"><a href="#2-2-文本编辑器" class="headerlink" title="2.2 文本编辑器"></a>2.2 文本编辑器</h3><blockquote><p>设置Git默认使用的文本编辑器，一般可能会使用Vi或者Vim，如果有其他偏好，可以重新设置：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git config --global core.editer &quot;code --wait&quot;<br></code></pre></td></tr></table></figure><h3 id="2-3-差异分析工具"><a href="#2-3-差异分析工具" class="headerlink" title="2.3 差异分析工具"></a>2.3 差异分析工具</h3><blockquote><p>在解决合并冲突时使用哪种差异分析工具。比如要改用vimdiff的话：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git config --global merge.tool vimdiff<br></code></pre></td></tr></table></figure><h3 id="2-4-查看配置信息"><a href="#2-4-查看配置信息" class="headerlink" title="2.4 查看配置信息"></a>2.4 查看配置信息</h3><blockquote><p>要检查已有的配置信息，可以使用<code>git config --list</code>命令：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ git config --list<br>http.postbuffer=<span class="hljs-number">2</span>M<br>user.namer=runoob<br>user.email=test@runoob.com<br></code></pre></td></tr></table></figure><h3 id="2-5-生成SSH秘钥"><a href="#2-5-生成SSH秘钥" class="headerlink" title="2.5 生成SSH秘钥"></a>2.5 生成SSH秘钥</h3><blockquote><p>如何你需要通过SSH进行Git操作，可以生成SSH密钥并添加到你的Git托管服务（如GitHub，GitLab等）上</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ssh-keygen -t rsa -b <span class="hljs-number">4096</span> -C &quot;your.email@example.com&quot;<br></code></pre></td></tr></table></figure><blockquote><p>按提示完成生成过程，然后将生成的公钥添加到相应的平台。</p></blockquote><h3 id="2-6-验证安装"><a href="#2-6-验证安装" class="headerlink" title="2.6 验证安装"></a>2.6 验证安装</h3><blockquote><p>在终端或命令行中运行以下命令，确保Git已安转并配置</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git --version<br>git config --list<br></code></pre></td></tr></table></figure><h2 id="3、-Git工作流程"><a href="#3、-Git工作流程" class="headerlink" title="3、 Git工作流程"></a>3、 Git工作流程</h2><h3 id="3-1-克隆仓库"><a href="#3-1-克隆仓库" class="headerlink" title="3.1 克隆仓库"></a>3.1 克隆仓库</h3><blockquote><p>如果你要参与一个已有的项目，首先需要将远程仓库克隆到本地</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git clone https://github.com/username/repo.git<br><span class="hljs-built_in">cd</span> repo<br></code></pre></td></tr></table></figure><h3 id="3-2-创建新分支"><a href="#3-2-创建新分支" class="headerlink" title="3.2 创建新分支"></a>3.2 创建新分支</h3><blockquote><p>为了避免直接在main或master分支上进行开发，通常会创建一个新的分支：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git checkout -b new-feature<br></code></pre></td></tr></table></figure><h3 id="3-3-工作目录"><a href="#3-3-工作目录" class="headerlink" title="3.3 工作目录"></a>3.3 工作目录</h3><blockquote><p>在工作目录中进行代码编辑、添加新文件或删除不需要的文件。</p></blockquote><h3 id="3-4-暂存文件"><a href="#3-4-暂存文件" class="headerlink" title="3.4 暂存文件"></a>3.4 暂存文件</h3><blockquote><p>将修改过的文件添加到暂存区，以便进行下一步的提交操作：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git add filename<br># 或者添加所有修改的文件<br>git add .<br></code></pre></td></tr></table></figure><h3 id="3-5-提交更改"><a href="#3-5-提交更改" class="headerlink" title="3.5 提交更改"></a>3.5 提交更改</h3><blockquote><p>将暂存区的更改提交到本地仓库，并添加提交信息</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git commit -m &quot;Add new feature&quot;<br></code></pre></td></tr></table></figure><h3 id="3-6-拉取最新更改"><a href="#3-6-拉取最新更改" class="headerlink" title="3.6 拉取最新更改"></a>3.6 拉取最新更改</h3><blockquote><p>在推送本地更改之前，最后从远程仓库拉取最新更改，以避免冲突：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git pull origin main<br># 或者如何在新的分支上工作<br>git pull origin new-feature<br></code></pre></td></tr></table></figure><h3 id="3-7-推送更改"><a href="#3-7-推送更改" class="headerlink" title="3.7 推送更改"></a>3.7 推送更改</h3><blockquote><p>将本地的提交推送至远程仓库：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git push origin new-feature<br></code></pre></td></tr></table></figure><h3 id="3-8-创建Pull-Request（PR）"><a href="#3-8-创建Pull-Request（PR）" class="headerlink" title="3.8 创建Pull Request（PR）"></a>3.8 创建Pull Request（PR）</h3><blockquote><p>在GitHub或其他托管平台上创建Pull Request，邀请团队成员进行代码审查。PR合并后，你的更改就会合并到主分支。</p></blockquote><h3 id="3-9-合并更改"><a href="#3-9-合并更改" class="headerlink" title="3.9 合并更改"></a>3.9 合并更改</h3><blockquote><p>在PR审核通过并合并后，可以将远程仓库的主分支合并到本地分支：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git checkout main<br>git pull origin main<br>git merge new-feature<br></code></pre></td></tr></table></figure><h3 id="3-10-删除分支"><a href="#3-10-删除分支" class="headerlink" title="3.10 删除分支"></a>3.10 删除分支</h3><blockquote><p>如果不在需要新功能分支，可以将其删除：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git branch -d new-feature<br># 或者从远程仓库删除分支：<br>git push origin --delete new-feature<br></code></pre></td></tr></table></figure><h2 id="4、工作区，暂存区和版本库"><a href="#4、工作区，暂存区和版本库" class="headerlink" title="4、工作区，暂存区和版本库"></a>4、工作区，暂存区和版本库</h2><h3 id="4-1-工作区"><a href="#4-1-工作区" class="headerlink" title="4.1 工作区"></a>4.1 工作区</h3><p>工作区是你在本地计算机上的项目目录，你在这里进行文件的创建、修改和删除操作。工作区包含了当前项目的所有文件和子目录。</p><p><strong>特点：</strong></p><ul><li>显示项目的当前状态。</li><li>文件的修改在工作区中进行，但这些修改还没有被记录到版本控制中。</li></ul><h3 id="4-2-暂存区"><a href="#4-2-暂存区" class="headerlink" title="4.2 暂存区"></a>4.2 暂存区</h3><p>暂存区是一个临时存储区域，它包含了即将被提交到版本库中的文件快照，在提交之前，你可以选择性地将工作区中的修改添加到暂存区。</p><p><strong>特点：</strong></p><ul><li>暂存区保存了将被包括在下一个提交中的更改。</li><li>你可以多次使用 <code>git add</code> 命令来将文件添加到暂存区，直到你准备好提交所有更改。</li></ul><p><strong>常用命令：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git add filename       # 将单个文件添加到暂存区<br>git add .              # 将工作区中的所有修改添加到暂存区<br>git status             # 查看哪些文件在暂存区中<br></code></pre></td></tr></table></figure><h3 id="4-3-版本库"><a href="#4-3-版本库" class="headerlink" title="4.3 版本库"></a>4.3 版本库</h3><p>版本库包含项目的所有版本历史记录。</p><p>每次提交都会在版本库中创建一个新的快照，这些快照是不可变的，确保了项目的完整历史记录。</p><p><strong>特点：</strong></p><ul><li>版本库分为本地版本库和远程版本库。这里主要指本地版本库。</li><li>本地版本库存储在 <code>.git</code> 目录中，它包含了所有提交的对象和引用。</li></ul><p><strong>常用命令：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git commit -m &quot;Commit message&quot;   # 将暂存区的更改提交到本地版本库<br>git log                          # 查看提交历史<br>git diff                         # 查看工作区和暂存区之间的差异<br>git diff --cached                # 查看暂存区和最后一次提交之间的差异<br></code></pre></td></tr></table></figure><h3 id="4-4-三者之间的关系"><a href="#4-4-三者之间的关系" class="headerlink" title="4.4 三者之间的关系"></a>4.4 三者之间的关系</h3><p><strong>1、工作区 -&gt; 暂存区</strong></p><p>使用 git add 命令将工作区中的修改添加到暂存区。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git add filename<br></code></pre></td></tr></table></figure><p><strong>2、暂存区 -&gt; 版本库</strong></p><p>使用 git commit 命令将暂存区中的修改提交到版本库。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git commit -m &quot;Commit message&quot;<br></code></pre></td></tr></table></figure><p><strong>3、版本库 -&gt; 远程仓库</strong></p><p>使用 git push 命令将本地版本库的提交推送到远程仓库。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git push origin branch-name<br></code></pre></td></tr></table></figure><p><strong>4、远程仓库 -&gt; 本地版本库</strong></p><p>使用 git pull 或 git fetch 命令从远程仓库获取更新。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git pull origin branch-name<br># 或者<br>git fetch origin branch-name<br>git merge origin/branch-name<br></code></pre></td></tr></table></figure><h2 id="5、创建仓库"><a href="#5、创建仓库" class="headerlink" title="5、创建仓库"></a>5、创建仓库</h2><h3 id="5-1-git-init"><a href="#5-1-git-init" class="headerlink" title="5.1 git init"></a>5.1 <code>git init</code></h3><blockquote><p>GIt使用<code>git init</code>命令初始化一个Git仓库，Git的很多命令都需要在Git的仓库中运行，在执行完成<code>git init</code>命令后，Git仓库会生成一个.git目录，该目录包含了资源的所以元数据，其他的项目目录保持不变。</p></blockquote><p><strong>使用方法</strong></p><blockquote><p>进入你想要创建仓库的目录，或者先创建一个新的目录：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">mkdir</span> my-project<br><span class="hljs-built_in">cd</span> my-project<br></code></pre></td></tr></table></figure><blockquote><p>使用当前目录作为Git仓库，我们只需要使它初始化。</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git init<br></code></pre></td></tr></table></figure><blockquote><p>该命令执行完后会在当前目录生成一个 .git 目录。</p><p>使用我们指定目录作为Git仓库</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git init newrepo<br></code></pre></td></tr></table></figure><blockquote><p>初始化后，会在newrepo目录下会出现名为.git的目录，所有Git需要的数据和资源都存放在这个目录中。</p><p>如何当前目录下有几个文件想要纳入版本控制，需要先用<code>git add</code>命令告诉Git开始对这些文件进行跟踪，然后提交：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ git add *.c<br>$ git add README<br>$ git commit -m &quot;初始化项目版本&quot;<br></code></pre></td></tr></table></figure><h3 id="2-git-clone"><a href="#2-git-clone" class="headerlink" title="2. git clone"></a>2. git clone</h3><blockquote><p>使用<code>git clone</code>从现有Git仓库中拷贝项目</p><p>克隆仓库的命令格式为：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git clone &lt;repo&gt;<br></code></pre></td></tr></table></figure><blockquote><p>如果我们需要克隆到指定的目录，可以使用以下命令格式：</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git clone &lt;repo&gt; &lt;directory&gt;<br># 例如<br>git clone git://github.com/schacon/grit.git mygrit<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong></p><ul><li><code>repo</code>：Git仓库</li><li><code>directory</code>：本地目录</li></ul><h2 id="6、Git基本操作"><a href="#6、Git基本操作" class="headerlink" title="6、Git基本操作"></a>6、Git基本操作</h2><blockquote><p>Git的工作就是创建和保持逆项目的快照及与之后的快照进行对比。</p><p>Git常用的是一下6个命令：git clone、git push、 git add、 git commit、 git checkout、 git pull。</p></blockquote><p><img src="E:\桌面\Linux\git基本操作.jpg" alt="git基本操作"></p><p><strong>说明：</strong></p><ul><li>workspace：工作区</li><li>stageing area：暂存区&#x2F;缓存区</li><li>local repository：版本库或本地仓库</li><li>remote repository：远程仓库</li></ul><h3 id="6-1-创建仓库命令"><a href="#6-1-创建仓库命令" class="headerlink" title="6.1 创建仓库命令"></a>6.1 创建仓库命令</h3><p>下表列出了 git 创建仓库的命令：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git init</code></td><td align="left">初始化仓库</td></tr><tr><td align="left"><code>git clone</code></td><td align="left">拷贝一份远程仓库，也就是下载一个项目。</td></tr></tbody></table><hr><h3 id="6-2-提交与修改"><a href="#6-2-提交与修改" class="headerlink" title="6.2 提交与修改"></a>6.2 提交与修改</h3><p>Git 的工作就是创建和保存你的项目的快照及与之后的快照进行对比。</p><p>下表列出了有关创建与提交你的项目的快照的命令：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git add</code></td><td align="left">添加文件到暂存区</td></tr><tr><td align="left"><code>git status</code></td><td align="left">查看仓库当前的状态，显示有变更的文件。</td></tr><tr><td align="left"><code>git diff</code></td><td align="left">比较文件的不同，即暂存区和工作区的差异。</td></tr><tr><td align="left"><code>git difftool</code></td><td align="left">使用外部差异工具查看和比较文件的更改。</td></tr><tr><td align="left"><code>git range-diff</code></td><td align="left">比较两个提交范围之间的差异。</td></tr><tr><td align="left"><code>git commit</code></td><td align="left">提交暂存区到本地仓库。</td></tr><tr><td align="left"><code>git reset</code></td><td align="left">回退版本。</td></tr><tr><td align="left"><code>git rm</code></td><td align="left">将文件从暂存区和工作区中删除。</td></tr><tr><td align="left"><code>git mv</code></td><td align="left">移动或重命名工作区文件。</td></tr><tr><td align="left"><code>git notes</code></td><td align="left">添加注释。</td></tr><tr><td align="left"><code>git checkout</code></td><td align="left">分支切换。</td></tr><tr><td align="left"><code>git switch （Git 2.23 版本引入）</code></td><td align="left">更清晰地切换分支。</td></tr><tr><td align="left"><code>git restore （Git 2.23 版本引入）</code></td><td align="left">恢复或撤销文件的更改。</td></tr><tr><td align="left"><code>git show</code></td><td align="left">显示 Git 对象的详细信息。</td></tr></tbody></table><h3 id="6-3-提交日志"><a href="#6-3-提交日志" class="headerlink" title="6.3 提交日志"></a>6.3 提交日志</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git log</code></td><td align="left">查看历史提交记录</td></tr><tr><td align="left"><code>git blame &lt;file&gt;</code></td><td align="left">以列表形式查看指定文件的历史修改记录</td></tr><tr><td align="left"><code>git shortlog</code></td><td align="left">生成简洁的提交日志摘要</td></tr><tr><td align="left"><code>git describe</code></td><td align="left">生成一个可读的字符串，该字符串基于 Git 的标签系统来描述当前的提交</td></tr></tbody></table><h3 id="6-4-远程操作"><a href="#6-4-远程操作" class="headerlink" title="6.4 远程操作"></a>6.4 远程操作</h3><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>git remote</code></td><td align="left">远程仓库操作</td></tr><tr><td align="left"><code>git fetch</code></td><td align="left">从远程获取代码库</td></tr><tr><td align="left"><code>git pull</code></td><td align="left">下载远程代码并合并</td></tr><tr><td align="left"><code>git push</code></td><td align="left">上传远程代码并合并</td></tr><tr><td align="left"><code>git submodule</code></td><td align="left">管理包含其他 Git 仓库的项目</td></tr></tbody></table><h2 id="7、Git-分支管理"><a href="#7、Git-分支管理" class="headerlink" title="7、Git 分支管理"></a>7、Git 分支管理</h2><blockquote><p>Git分支管理是Git强大功能之一，能够让多个开发人员并行工作，开发新功能、修复bug或进行实验，而不会影响主代码库。</p><p>几乎每一个版本控制系统都以某种形式支持分支，一个分支代表一条独立的开发线。</p><p>使用分支意味着你可以从开发主线上分离来，然后在不影响主线的同时继续工作。</p></blockquote><p><img src="E:\桌面\Linux\git分支.jpg" alt="git分支"></p><blockquote><p>Git分支实际上是指向更改快照的指针。</p><p>有人把Git的分支模型称为必杀技特性，而正是因为它，将Git从版本控制系统家族里区分出来。</p></blockquote><ol><li><strong>创建分支</strong></li></ol><blockquote><p>创建新分支并切换到该分支</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git checkout -b &lt;branchname&gt;<br># 切换分支命令：<br>git checkout (branchname)<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>查看分支</strong></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 查看所有分支：<br>git branch<br># 查看远程分支：<br>git branch -r<br># 查看所有本地和远程分支：<br>git branch -a<br></code></pre></td></tr></table></figure><ol start="3"><li><strong>合并分支</strong></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 将其他分支合并到当前分支：<br>git merge &lt;branchname&gt;<br># 例子：切换到main分支并合并feature-xyz分支：<br>git checkout main<br>git merge feature-xyz<br></code></pre></td></tr></table></figure><ol start="4"><li><strong>解决合并冲突</strong></li></ol><blockquote><p>当合并过程中出现冲突时，Git会标记冲突文件，你需要手动解决冲突。</p><p>打开冲突文件，按照标记解决冲突。</p></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 标记冲突解决完成：<br>git add &lt;conflict-file&gt;<br># 提交合并结果：<br>git commit<br></code></pre></td></tr></table></figure><ol start="5"><li><strong>删除分支</strong></li></ol><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"># 删除本地分支：<br>git branch -d &lt;branchname&gt;<br># 强制删除未合并的分支：<br>git branch -D &lt;branchname&gt;<br># 删除远程分支：<br>git push origin --delete &lt;branchname&gt;<br></code></pre></td></tr></table></figure><p><strong>命令手册</strong></p><table><thead><tr><th align="left"><strong>命令</strong></th><th align="left"><strong>说明</strong></th><th align="left"><strong>用法示例</strong></th></tr></thead><tbody><tr><td align="left"><code>git branch</code></td><td align="left">列出、创建或删除分支。它不切换分支，只是用于管理分支的存在。</td><td align="left"><code>git branch</code>：列出所有分支 <code>git branch new-branch</code>：创建新分支 <code>git branch -d old-branch</code>：删除分支</td></tr><tr><td align="left"><code>git checkout</code></td><td align="left">切换到指定的分支或恢复工作目录中的文件。也可以用来检出特定的提交。</td><td align="left"><code>git checkout branch-name</code>：切换分支 <code>git checkout file.txt</code>：恢复文件到工作区 <code>git checkout &lt;commit-hash&gt;</code>：检出特定提交</td></tr><tr><td align="left"><code>git switch</code></td><td align="left">专门用于切换分支，相比 <code>git checkout</code> 更加简洁和直观，主要用于分支操作。</td><td align="left"><code>git switch branch-name</code>：切换到指定分支 <code>git switch -c new-branch</code>：创建并切换到新分支</td></tr><tr><td align="left"><code>git merge</code></td><td align="left">合并指定分支的更改到当前分支。</td><td align="left"><code>git merge branch-name</code>：将指定分支的更改合并到当前分支</td></tr><tr><td align="left"><code>git mergetool</code></td><td align="left">启动合并工具，以解决合并冲突。</td><td align="left"><code>git mergetool</code>：使用默认合并工具解决冲突 <code>git mergetool --tool=&lt;tool-name&gt;</code>：指定合并工具</td></tr><tr><td align="left"><code>git log</code></td><td align="left">显示提交历史记录。</td><td align="left"><code>git log</code>：显示提交历史 <code>git log --oneline</code>：以简洁模式显示提交历史</td></tr><tr><td align="left"><code>git stash</code></td><td align="left">保存当前工作目录中的未提交更改，并将其恢复到干净的工作区。</td><td align="left"><code>git stash</code>：保存当前更改 <code>git stash pop</code>：恢复最近保存的更改 <code>git stash list</code>：列出所有保存的更改</td></tr><tr><td align="left"><code>git tag</code></td><td align="left">创建、列出或删除标签。标签用于标记特定的提交。</td><td align="left"><code>git tag</code>：列出所有标签 <code>git tag v1.0</code>：创建一个新标签 <code>git tag -d v1.0</code>：删除标签</td></tr><tr><td align="left"><code>git worktree</code></td><td align="left">允许在一个仓库中检查多个工作区，适用于同时处理多个分支。</td><td align="left"><code>git worktree add &lt;path&gt; branch-name</code>：在指定路径添加新的工作区并切换到指定分支 <code>git worktree remove &lt;path&gt;</code>：删除工作区</td></tr></tbody></table><h2 id="8、Git查看提交历史"><a href="#8、Git查看提交历史" class="headerlink" title="8、Git查看提交历史"></a>8、Git查看提交历史</h2><blockquote><p>查看Git提交历史可以帮助了解代码的变更情况和开发进度。</p><p>Git 提交历史一般常用两个命令：</p><ul><li><code>git long</code> - 查看历史提交记录。</li><li><code>git blame &lt;file&gt;</code> - 以列表形式查看指定文件的历史修改记录。</li></ul></blockquote><h3 id="8-1-git-long"><a href="#8-1-git-long" class="headerlink" title="8.1 git long"></a>8.1 git long</h3><p>在使用 Git 提交了若干更新之后，又或者克隆了某个项目，想回顾下提交历史，我们可以使用 <strong>git log</strong> 命令查看。</p><p><strong>git log</strong> 命令用于查看 Git 仓库中提交历史记录。</p><p><strong>git log</strong> 显示了从最新提交到最早提交的所有提交信息，包括提交的哈希值、作者、提交日期和提交消息等。</p><p><strong>git log</strong> 命令的基本语法：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git log [选项] [分支名/提交哈希]<br></code></pre></td></tr></table></figure><p>常用的选项包括：</p><ul><li><code>-p</code>：显示提交的补丁（具体更改内容）。</li><li><code>--oneline</code>：以简洁的一行格式显示提交信息。</li><li><code>--graph</code>：以图形化方式显示分支和合并历史。</li><li><code>--decorate</code>：显示分支和标签指向的提交。</li><li><code>--author=&lt;作者&gt;</code>：只显示特定作者的提交。</li><li><code>--since=&lt;时间&gt;</code>：只显示指定时间之后的提交。</li><li><code>--until=&lt;时间&gt;</code>：只显示指定时间之前的提交。</li><li><code>--grep=&lt;模式&gt;</code>：只显示包含指定模式的提交消息。</li><li><code>--no-merges</code>：不显示合并提交。</li><li><code>--stat</code>：显示简略统计信息，包括修改的文件和行数。</li><li><code>--abbrev-commit</code>：使用短提交哈希值。</li><li><code>--pretty=&lt;格式&gt;</code>：使用自定义的提交信息显示格式。</li></ul><h3 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h3><p>限制显示的提交数:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git log -n &lt;number&gt;<br></code></pre></td></tr></table></figure><p>例如，显示最近的 5 次提交：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git log -n <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>显示自指定日期之后的提交：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git log --since=&quot;<span class="hljs-number">2024</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>&quot;<br></code></pre></td></tr></table></figure><p>显示指定日期之前的提交：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git log --until=&quot;<span class="hljs-number">2024</span>-<span class="hljs-number">07</span>-<span class="hljs-number">01</span>&quot;<br></code></pre></td></tr></table></figure><p>只显示某个作者的提交：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git log --author=&quot;Author Name&quot;<br></code></pre></td></tr></table></figure><h3 id="8-2-git-blame"><a href="#8-2-git-blame" class="headerlink" title="8.2 git blame"></a>8.2 git blame</h3><p><strong>git blame</strong> 命令用于逐行显示指定文件的每一行代码是由谁在什么时候引入或修改的。</p><p><strong>git blame</strong> 可以追踪文件中每一行的变更历史，包括作者、提交哈希、提交日期和提交消息等信息。</p><p>如果要查看指定文件的修改记录可以使用 git blame 命令，格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git blame [选项] <span class="hljs-tag">&lt;<span class="hljs-name">文件路径</span>&gt;</span><br></code></pre></td></tr></table></figure><p>常用的选项包括：</p><ul><li><code>-L &lt;起始行号&gt;,&lt;结束行号&gt;</code>：只显示指定行号范围内的代码注释。</li><li><code>-C</code>：对于重命名或拷贝的代码行，也进行代码行溯源。</li><li><code>-M</code>：对于移动的代码行，也进行代码行溯源。</li><li><code>-C -C</code> 或 <code>-M -M</code>：对于较多改动的代码行，进行更进一步的溯源。</li><li><code>--show-stats</code>：显示包含每个作者的行数统计信息。</li></ul><p>显示文件每一行的代码注释和相关信息：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git blame &lt;文件路径&gt;<br></code></pre></td></tr></table></figure><p>只显示指定行号范围内的代码注释：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git blame -L &lt;起始行号&gt;,&lt;结束行号&gt; &lt;文件路径&gt;<br></code></pre></td></tr></table></figure><p>对于重命名或拷贝的代码行进行溯源：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git blame -C &lt;文件路径&gt;<br></code></pre></td></tr></table></figure><p>对于移动的代码行进行溯源：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git blame -M &lt;文件路径&gt;<br></code></pre></td></tr></table></figure><p>显示行数统计信息：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git blame --show-stats &lt;文件路径&gt;<br></code></pre></td></tr></table></figure><h2 id="9、Git标签"><a href="#9、Git标签" class="headerlink" title="9、Git标签"></a>9、Git标签</h2><blockquote><p>如果你达到一个重要的阶段，并希望永远记住提交的快照，你可以使用 <strong>git tag</strong> 给它打上标签。</p><p>Git 标签（Tag）用于给仓库中的特定提交点加上标记，通常用于发布版本（如 v1.0, v2.0）。</p><p>比如说，我们想为我们的 runoob 项目发布一个 “1.0” 版本，我们可以用 <strong>git tag -a v1.0</strong> 命令给最新一次提交打上（HEAD） “v1.0” 的标签。</p><p><strong><em>*-a*</em> 选项意为</strong>“创建一个带注解的标签”，不用 <strong>-a</strong> 选项也可以执行的，但它不会记录这标签是啥时候打的，谁打的，也不会让你添加个标签的注解，我们推荐一直创建带注解的标签。</p></blockquote><p><strong>标签语法格式：</strong></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git tag &lt;tagname&gt;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git tag v1.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>-a</strong> 选项可以添加注解：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ git tag -a v1.<span class="hljs-number">0</span> <br></code></pre></td></tr></table></figure><p>当你执行 git tag -a 命令时，Git 会打开你的编辑器，让你写一句标签注解，就像你给提交写注解一样。</p><h3 id="9-1-推送标签到远程仓库"><a href="#9-1-推送标签到远程仓库" class="headerlink" title="9.1 推送标签到远程仓库"></a>9.1 推送标签到远程仓库</h3><p>默认情况下，git push 不会推送标签，你需要显式地推送标签。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git push origin &lt;tagname&gt;<br></code></pre></td></tr></table></figure><p>推送所有标签：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git push origin --tags<br></code></pre></td></tr></table></figure><h3 id="9-2-删除轻量标签"><a href="#9-2-删除轻量标签" class="headerlink" title="9.2 删除轻量标签"></a>9.2 删除轻量标签</h3><p>本地删除：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git tag -d &lt;tagname&gt;<br></code></pre></td></tr></table></figure><p>远程删除：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git push origin --delete &lt;tagname&gt;<br></code></pre></td></tr></table></figure><h3 id="9-3-附注标签"><a href="#9-3-附注标签" class="headerlink" title="9.3 附注标签"></a>9.3 附注标签</h3><p>附注标签存储了创建者的名字、电子邮件、日期，并且可以包含标签信息。附注标签更为正式，适用于需要额外元数据的场景。</p><p>创建附注标签语法：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git tag -a &lt;tagname&gt; -m &quot;message&quot;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git tag -a &lt;tagname&gt; -m &quot;runoob.com标签&quot;<br></code></pre></td></tr></table></figure><p>PGP 签名标签命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git tag -s &lt;tagname&gt; -m &quot;runoob.com标签&quot;<br></code></pre></td></tr></table></figure><p>查看标签信息：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git show &lt;tagname&gt;<br></code></pre></td></tr></table></figure><h2 id="9、Git-进阶操作"><a href="#9、Git-进阶操作" class="headerlink" title="9、Git 进阶操作"></a>9、Git 进阶操作</h2><p>在掌握了 Git 的基础操作之后，进阶操作可以帮助你更高效地管理和优化你的代码库。</p><p>以下是一些常见的进阶操作及其详细说明：</p><ul><li><strong>交互式暂存</strong>：逐块选择要暂存的更改，精细控制提交内容。</li><li><strong>Git Stash</strong>：临时保存工作进度，方便切换任务。</li><li><strong>Git Rebase</strong>：将一个分支上的更改移到另一个分支之上，保持提交历史线性。</li><li><strong>Git Cherry-Pick</strong>：选择特定提交并应用到当前分支。</li></ul><h3 id="9-1-交互式暂存（Interactive-Staging）"><a href="#9-1-交互式暂存（Interactive-Staging）" class="headerlink" title="9.1 交互式暂存（Interactive Staging）"></a>9.1 交互式暂存（Interactive Staging）</h3><p><code>git add</code> 命令可以选择性地将文件或文件的一部分添加到暂存区，这在处理复杂更改时非常有用。</p><ul><li><strong>使用 <code>git add -p</code></strong>：逐块选择要暂存的更改。</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git add -p<br></code></pre></td></tr></table></figure><p>执行此命令后，Git 会逐块显示文件的更改，你可以选择是否暂存每个块。常用选项包括：</p><ul><li><code>y</code>：暂存当前块</li><li><code>n</code>：跳过当前块</li><li><code>s</code>：拆分当前块</li><li><code>e</code>：手动编辑当前块</li><li><code>q</code>：退出暂存</li></ul><h3 id="9-2-Git-Stash：临时保存工作进度"><a href="#9-2-Git-Stash：临时保存工作进度" class="headerlink" title="9.2 Git Stash：临时保存工作进度"></a>9.2 Git Stash：临时保存工作进度</h3><p><code>git stash</code> 命令允许你临时保存当前工作目录的更改，以便你可以切换到其他分支或处理其他任务。</p><p><strong>保存当前工作进度</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git stash<br></code></pre></td></tr></table></figure><p><strong>查看存储的进度</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git stash list<br></code></pre></td></tr></table></figure><p><strong>应用最近一次存储的进度</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git stash apply<br></code></pre></td></tr></table></figure><p><strong>应用并删除最近一次存储的进度</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git stash pop<br></code></pre></td></tr></table></figure><p><strong>删除特定存储</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git stash drop stash@&#123;n&#125;<br></code></pre></td></tr></table></figure><p><strong>清空所有存储</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git stash clear<br></code></pre></td></tr></table></figure><h3 id="3-Git-Rebase：变基"><a href="#3-Git-Rebase：变基" class="headerlink" title="3. Git Rebase：变基"></a>3. Git Rebase：变基</h3><p><code>git rebase</code> 命令用于将一个分支上的更改移到另一个分支之上。它可以帮助保持提交历史的线性，减少合并时的冲突。</p><p><strong>变基当前分支到指定分支</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git rebase &lt;branchname&gt;<br></code></pre></td></tr></table></figure><p>例如，将当前分支变基到 <code>main</code> 分支：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git rebase main<br></code></pre></td></tr></table></figure><ul><li><strong>交互式变基</strong>：</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git rebase -i &lt;commit&gt;<br></code></pre></td></tr></table></figure><p>交互式变基允许你在变基过程中编辑、删除或合并提交。常用选项包括：</p><ul><li><code>pick</code>：保留提交</li><li><code>reword</code>：修改提交信息</li><li><code>edit</code>：编辑提交</li><li><code>squash</code>：将当前提交与前一个提交合并</li><li><code>fixup</code>：将当前提交与前一个提交合并，不保留提交信息</li><li><code>drop</code>：删除提交</li></ul><h3 id="4-Git-Cherry-Pick：拣选提交"><a href="#4-Git-Cherry-Pick：拣选提交" class="headerlink" title="4. Git Cherry-Pick：拣选提交"></a>4. Git Cherry-Pick：拣选提交</h3><p><code>git cherry-pick</code> 命令允许你选择特定的提交并将其应用到当前分支。它在需要从一个分支移植特定更改到另一个分支时非常有用。</p><p><strong>拣选提交</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git cherry-pick &lt;commit&gt;<br></code></pre></td></tr></table></figure><p>例如，将 <code>abc123</code> 提交应用到当前分支：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git cherry-pick abc123<br></code></pre></td></tr></table></figure><p><strong>处理拣选冲突</strong>：如果拣选过程中出现冲突，解决冲突后使用 <code>git cherry-pick --continue</code> 继续拣选。</p><h3 id="示例操作"><a href="#示例操作" class="headerlink" title="示例操作"></a>示例操作</h3><p>以下是一个综合示例，展示了如何使用这些进阶操作：</p><p><strong>交互式暂存</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git add -p<br></code></pre></td></tr></table></figure><p><strong>保存工作进度</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git stash<br></code></pre></td></tr></table></figure><p><strong>查看存储的进度</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git stash list<br></code></pre></td></tr></table></figure><p><strong>应用存储的进度</strong>：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">git stash <span class="hljs-built_in">apply</span><br></code></pre></td></tr></table></figure><p><strong>变基当前分支到 <code>main</code> 分支</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git rebase main<br></code></pre></td></tr></table></figure><p><strong>交互式变基，编辑提交历史</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git rebase -i HEAD~<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>编辑提交历史，如合并和重命名提交。</p><p><strong>拣选 <code>feature</code> 分支上的特定提交到 <code>main</code> 分支</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git checkout main<br>git cherry-pick abc123<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/14/hello-world/"/>
    <url>/2025/01/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
